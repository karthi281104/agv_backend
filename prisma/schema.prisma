// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EMPLOYEE
  MANAGER
}

enum LoanStatus {
  PENDING
  APPROVED
  ACTIVE
  COMPLETED
  REJECTED
  DEFAULTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentType {
  LOAN_DISBURSEMENT
  EMI_PAYMENT
  PARTIAL_PAYMENT
  INTEREST_PAYMENT
  PENALTY_PAYMENT
  LOAN_CLOSURE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(EMPLOYEE)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdLoans    Loan[]    @relation("LoanCreatedBy")
  approvedLoans   Loan[]    @relation("LoanApprovedBy")
  createdPayments Payment[] @relation("PaymentCreatedBy")

  @@map("users")
}

model Customer {
  id           String  @id @default(cuid())
  firstName    String
  lastName     String
  email        String? @unique
  phone        String  @unique
  address      String
  city         String
  state        String
  pincode      String
  dateOfBirth  DateTime?
  occupation   String?
  monthlyIncome Decimal? @db.Decimal(10, 2)
  
  // KYC Documents
  aadharNumber String  @unique
  panNumber    String  @unique
  
  // Profile and documents
  profileImage String?
  aadharImage  String?
  panImage     String?
  incomeProof  String?
  
  // Status
  isActive     Boolean @default(true)
  kycVerified  Boolean @default(false)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  loans        Loan[]

  @@map("customers")
}

enum GoldItemStatus {
  PLEDGED
  RELEASED
  AUCTIONED
  LOST
}

model GoldItem {
  id          String  @id @default(cuid())
  itemType    String  // Ring, Necklace, Bracelet, etc.
  weight      Decimal @db.Decimal(8, 3) // in grams
  purity      String  // 22K, 18K, etc.
  description String?
  images      String[] // Array of image URLs
  
  // Valuation
  currentRate Decimal @db.Decimal(10, 2) // per gram rate
  totalValue  Decimal @db.Decimal(12, 2) // total valuation
  
  // Release tracking
  status          GoldItemStatus @default(PLEDGED)
  releasedAt      DateTime?
  releasedById    String?
  releasedToName  String?        // Name of person who collected
  releasedToPhone String?        // Phone of person who collected
  releaseNotes    String?
  
  loanId      String
  loan        Loan    @relation(fields: [loanId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([loanId])
  @@index([status])
  @@map("gold_items")
}


model Loan {
  id                String     @id @default(cuid())
  loanNumber        String     @unique
  
  // Customer details
  customerId        String
  customer          Customer   @relation(fields: [customerId], references: [id])
  
  // Loan details
  principalAmount    Decimal    @db.Decimal(12, 2)
  interestRate       Decimal    @db.Decimal(5, 2) // Annual percentage
  tenure             Int        // in months
  emiAmount          Decimal    @db.Decimal(10, 2)
  outstandingBalance Decimal    @db.Decimal(12, 2) @default(0) // Remaining balance to be paid
  totalAmountPaid    Decimal    @db.Decimal(12, 2) @default(0) // Total amount paid so far
  
  // Gold details
  goldItems         GoldItem[]
  totalGoldWeight   Decimal    @db.Decimal(8, 3)
  totalGoldValue    Decimal    @db.Decimal(12, 2)
  ltvRatio          Decimal    @db.Decimal(5, 2) // Loan to Value ratio
  
  // Status and dates
  status            LoanStatus @default(PENDING)
  applicationDate   DateTime   @default(now())
  approvalDate      DateTime?
  disbursementDate  DateTime?
  maturityDate      DateTime?
  
  // Overdue tracking
  isOverdue         Boolean    @default(false)
  overdueSince      DateTime?  // When the loan became overdue
  overdueAmount     Decimal    @db.Decimal(12, 2) @default(0) // Amount overdue
  penaltyAmount     Decimal    @db.Decimal(12, 2) @default(0) // Accumulated penalty
  lastPaymentDate   DateTime?  // Date of last payment received
  nextDueDate       DateTime?  // Next EMI/payment due date
  daysOverdue       Int        @default(0) // Number of days overdue
  
  // Penalty configuration
  penaltyRate       Decimal    @db.Decimal(5, 2) @default(1.0) // Penalty percentage per day
  penaltyType       String     @default("PERCENTAGE") // PERCENTAGE or FIXED
  
  // Staff handling
  createdById       String
  createdBy         User       @relation("LoanCreatedBy", fields: [createdById], references: [id])
  approvedById      String?
  approvedBy        User?      @relation("LoanApprovedBy", fields: [approvedById], references: [id])
  
  // Additional fields
  purpose           String?
  remarks           String?
  
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relations
  payments          Payment[]

  @@map("loans")
}

model Payment {
  id              String        @id @default(cuid())
  
  // Loan reference
  loanId          String
  loan            Loan          @relation(fields: [loanId], references: [id])
  
  // Payment details
  amount          Decimal       @db.Decimal(10, 2)
  paymentType     PaymentType
  paymentMethod   String        // Cash, Bank Transfer, UPI, etc.
  transactionId   String?       // For digital payments
  
  // Status and dates
  status          PaymentStatus @default(PENDING)
  paymentDate     DateTime      @default(now())
  dueDate         DateTime?
  
  // Additional details
  principalAmount Decimal?      @db.Decimal(10, 2)
  interestAmount  Decimal?      @db.Decimal(10, 2)
  penaltyAmount   Decimal?      @db.Decimal(10, 2)
  
  // Staff handling
  createdById     String
  createdBy       User          @relation("PaymentCreatedBy", fields: [createdById], references: [id])
  
  // Receipt and notes
  receiptNumber   String?       @unique
  notes           String?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("payments")
}

model GoldRate {
  id        String   @id @default(cuid())
  purity    String   // 22K, 18K, etc.
  rate      Decimal  @db.Decimal(10, 2) // per gram
  date      DateTime @default(now())
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("gold_rates")
}

model Settings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String   @default("general")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

enum DocumentType {
  CUSTOMER_PHOTO
  AADHAR_CARD
  PAN_CARD
  INCOME_PROOF
  ADDRESS_PROOF
  LOAN_AGREEMENT
  BOND_PAPER
  SURETY_PHOTO
  SURETY_AADHAR
  SURETY_PAN
  GOLD_PHOTO
  FINGERPRINT
  SIGNATURE
  OTHER
}

enum DocumentStatus {
  PENDING_VERIFICATION
  VERIFIED
  REJECTED
  EXPIRED
}

model Document {
  id              String         @id @default(cuid())
  
  // Document details
  documentType    DocumentType
  fileName        String
  originalName    String
  filePath        String         // Relative path in uploads folder
  fileUrl         String         // Full URL to access file
  mimeType        String
  fileSize        Int            // in bytes
  
  // Associated entities
  customerId      String?
  loanId          String?
  
  // Verification
  status          DocumentStatus @default(PENDING_VERIFICATION)
  verifiedById    String?
  verifiedAt      DateTime?
  rejectionReason String?
  
  // Metadata
  description     String?
  expiryDate      DateTime?      // For documents like PAN, Aadhar
  
  // Timestamps
  uploadedAt      DateTime       @default(now())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([customerId])
  @@index([loanId])
  @@index([documentType])
  @@index([status])
  @@map("documents")
}
